@page "/{_contextpageurlpath?}"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using System.Linq
@using System.Collections.Generic

@inject Data.Applicationdbcontext applicationdbcontext
@inject Applicationprovider applicationprovider
@inject Cookies.Cookiesprovider cookiesprovider
@inject Modal.Modalservice modalservice

@inject IConfiguration configuration
@inject IHttpClientFactory ihttpclientfactory
@inject NavigationManager navigationmanager



<div>

    @if (this.installed)
    {

        <div class="sidebar">

            <Mihcelle.Hwavmvid.Components.Layout.NavMenu />

        </div>

        <div class="content px-4">

            <PageTitle>Home</PageTitle>

            <h1>Hello, world!</h1>

            Welcome to your new app. Installation link here.

            <div>
                <NavLink class="dropdown-item" href="Installation">
                    <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Install and ensure database created.
                </NavLink>
            </div>

        </div>



        <link href="/_content/Mihcelle.Hwavmvid.Alerts/alerts.min.css" rel="stylesheet" />
        <Mihcelle.Hwavmvid.Alerts.AlertsComponent />
        <Mihcelle.Hwavmvid.Notifications.NotificationsComponent />
    }

</div>


@code{


    private bool installed { get; set; } = false;

    [Parameter]
    public string? _contextpageurlpath { get; set; }

    protected override async Task OnInitializedAsync()
    {

        this.installed = !string.IsNullOrEmpty(this.configuration.GetConnectionString("DefaultConnection"));
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {

        if (this.installed == true)
        {
            if (this.applicationprovider._contextpage == null)
            {
                var contextsiteid = this.applicationprovider?._contextsite?.Id;
                this.applicationprovider._contextpage = await this.applicationdbcontext.Applicationpages.Where(item => item.Siteid == contextsiteid && (item.Urlpath == this._contextpageurlpath || item.Urlpath == "index")).FirstOrDefaultAsync();
            }
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && this.installed == false)
        {

            this.navigationmanager.NavigateTo(this.navigationmanager.BaseUri + "installation", true);
        }

        if (firstRender && this.installed == true)
        {

            await this.cookiesprovider.Initcookiesprovider();
            var client = this.ihttpclientfactory.CreateClient();
            client.BaseAddress = new Uri(this.navigationmanager.BaseUri);
            var httpresponsemessage = await client.GetAsync("api/authcookie");
            var authcookie = await httpresponsemessage.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(authcookie))
            {
                await this.cookiesprovider.Setcookie(Shared.Constants.Authentication.Authcookiename, authcookie, 10);
            }

            string cookievalue = await this.cookiesprovider.Getcookie(Shared.Constants.Authentication.Authcookiename);

            await this.applicationprovider.Establishapplicationconnection();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}